Tips for each category

Rolling Window
- monotonically decreasing queue sometimes useful to find min for each window

Stack
- monotonically decreasing stack 

Binary search
- knowing how to pivot bias left or right, and keeping results if still valid

Linked List 
- Fast and slow advancing

Trie
- use for c in word

heap
- Heap good to get the k largest / smallest
- use quickselect to get the kth largest (individual item)

backtracking
- If you want to reuse state, recursive backtrack. State, for each next, add to state, backtrack, remove from state
- Iterative backtracking - only possible if you can save a copy of the state to the stack.
- Backtracking is a lot like dfs

Graphs
- DFS, know how
- topological search, better with iterative bfs
- BFS, a visited set may help speed things up.

- Know prim's alg MST (add min weight reachable edge at a time)
- kruskall's alg - add min edges while no loops

- dijkstras - add min total weight edge leading to new thing
    - dijkstra's without weights is BFS

- Bellman ford - can find neg cycles. Basically store weight for each node, and on each level (like a level bfs), go thru all edges and update best cost to get to a node.
    - if still improvements after n times, neg cycle. 
    - O(E * n)

DP
Summary: 3 types, top down dfs + memo, bottom up classic subproblems dp (think subproblems, or substr), knapsack. See if problem reducible to these.
- For classic dp, think about subproblems
- If can be solved with a search alg, can it be solved by DP? Are there subproblems?
- DFS + memoization
- Knapsack **
- string dp, subproblems are how to solve for prefixes of str

Greedy
- Impl can be tricky, make sure you properly define invariants and think about edge cases
    - Define whole approach and verify correctness before implementing.
- Sometimes, you need to figure out the key / simple way / invariant for the algorithm. Might be a different way of seeing things.